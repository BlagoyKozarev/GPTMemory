import argparse
import json
from pathlib import Path
from datetime import datetime
import re

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏
db_path = Path('out/MANIFEST.json')

def validate_date(date_string):
    """–í–∞–ª–∏–¥–∏—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –Ω–∞ –¥–∞—Ç–∞—Ç–∞ (YYYY-MM-DD)."""
    if not date_string:
        return True
    
    try:
        datetime.strptime(date_string, '%Y-%m-%d')
        return True
    except ValueError:
        return False

def validate_tags(tags_string):
    """–í–∞–ª–∏–¥–∏—Ä–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∏—Ä–∞ —Ç–∞–≥–æ–≤–µ."""
    if not tags_string:
        return []
    
    # –†–∞–∑–¥–µ–ª—è–Ω–µ –ø–æ –∑–∞–ø–µ—Ç–∞—è –∏ –ø–æ—á–∏—Å—Ç–≤–∞–Ω–µ
    tags = [tag.strip() for tag in tags_string.split(',') if tag.strip()]
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è - —Å–∞–º–æ –±—É–∫–≤–∏, —Ü–∏—Ñ—Ä–∏, —Ç–∏—Ä–µ –∏ –¥–æ–ª–Ω–∏ —á–µ—Ä—Ç–∏
    valid_tags = []
    for tag in tags:
        if re.match(r'^[a-zA-Z0-9_-]+$', tag):
            valid_tags.append(tag.lower())
        else:
            print(f"‚ö†Ô∏è  –ù–µ–≤–∞–ª–∏–¥–µ–Ω —Ç–∞–≥ '{tag}' - —Ä–∞–∑—Ä–µ—à–µ–Ω–∏ —Å–∞ —Å–∞–º–æ –±—É–∫–≤–∏, —Ü–∏—Ñ—Ä–∏, —Ç–∏—Ä–µ –∏ –¥–æ–ª–Ω–∏ —á–µ—Ä—Ç–∏")
    
    return valid_tags

def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω–∏ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç."""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∏
    ap = argparse.ArgumentParser(
        description='–û–±–Ω–æ–≤—è–≤–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω–∏—Ç–µ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç –≤ MANIFEST.json',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä–∏ –∑–∞ —É–ø–æ—Ç—Ä–µ–±–∞:
  python update_summary.py --id abc123def456 --summary "–û–±–Ω–æ–≤–µ–Ω–æ —Ä–µ–∑—é–º–µ"
  python update_summary.py --id abc123def456 --category marketing --tags "–ø–ª–∞–Ω,Q3,–±–∏–∑–Ω–µ—Å"
  python update_summary.py --id abc123def456 --date "2024-03-15"
  python update_summary.py --id abc123def456 --summary "–ü—ä–ª–Ω–æ —Ä–µ–∑—é–º–µ" --category health --tags "–∑–¥—Ä–∞–≤–µ,–¥–∞–Ω–Ω–∏" --date "2024-03-15"
        """
    )
    
    ap.add_argument('--id', required=True, 
                   help='ID –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∑–∞ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ (12-—Å–∏–º–≤–æ–ª–µ–Ω –ø—Ä–µ—Ñ–∏–∫—Å –æ—Ç SHA256)')
    ap.add_argument('--summary', required=False, default=None,
                   help='–ù–æ–≤–æ –∫—Ä–∞—Ç–∫–æ —Ä–µ–∑—é–º–µ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞')
    ap.add_argument('--category', required=False, default=None,
                   choices=['veganmapai', 'health', 'marketing', 'screens', 'logs', 'general'],
                   help='–ù–æ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞')
    ap.add_argument('--tags', required=False, default=None,
                   help='–¢–∞–≥–æ–≤–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏ —Å—ä—Å –∑–∞–ø–µ—Ç–∞—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: "plan,Q3,business")')
    ap.add_argument('--date', required=False, default=None,
                   help='–î–∞—Ç–∞ –≤—ä–≤ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD (–Ω–∞–ø—Ä–∏–º–µ—Ä: "2024-03-15")')
    
    args = ap.parse_args()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–ª–∏ MANIFEST.json —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
    if not db_path.exists():
        print("‚ùå MANIFEST.json –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω.")
        print("üîÑ –ò–∑–ø—ä–ª–Ω–µ—Ç–µ –ø—ä—Ä–≤–æ: python ingest_folder.py archives")
        return

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ –≤—Ö–æ–¥–Ω–∏—Ç–µ –¥–∞–Ω–Ω–∏
    if args.date and not validate_date(args.date):
        print("‚ùå –ù–µ–≤–∞–ª–∏–¥–µ–Ω —Ñ–æ—Ä–º–∞—Ç –Ω–∞ –¥–∞—Ç–∞. –ò–∑–ø–æ–ª–∑–≤–∞–π—Ç–µ YYYY-MM-DD (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2024-03-15)")
        return

    try:
        # –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –±–∞–∑–∞—Ç–∞ –¥–∞–Ω–Ω–∏
        with open(db_path, 'r', encoding='utf-8') as f:
            db = json.load(f)

        # –¢—ä—Ä—Å–µ–Ω–µ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ ID
        hit = None
        for r in db:
            if r.get('id') == args.id:
                hit = r
                break

        if not hit:
            print(f"‚ùå –î–æ–∫—É–º–µ–Ω—Ç —Å ID '{args.id}' –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω.")
            print(f"üí° –°—ä–≤–µ—Ç: –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ —Å–ø–∏—Å—ä–∫–∞ —Å ID-—Ç–∞ –≤ MANIFEST.csv –∏–ª–∏ –∏–∑–ø–æ–ª–∑–≤–∞–π—Ç–µ:")
            print(f"   python manifest.py")
            return

        # –ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ —Ç–µ–∫—É—â–∏—Ç–µ –¥–∞–Ω–Ω–∏
        print(f"üìÑ –ù–∞–º–µ—Ä–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç: {hit.get('title', '–ë–µ–∑ –∑–∞–≥–ª–∞–≤–∏–µ')}")
        print(f"üìÅ –¢–µ–∫—É—â–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {hit.get('category', '–ù—è–º–∞')}")
        print(f"üè∑Ô∏è  –¢–µ–∫—É—â–∏ —Ç–∞–≥–æ–≤–µ: {', '.join(hit.get('tags', [])) or '–ù—è–º–∞'}")
        print(f"üìÖ –¢–µ–∫—É—â–∞ –¥–∞—Ç–∞: {hit.get('date', '–ù—è–º–∞')}")
        print(f"üìù –¢–µ–∫—É—â–æ —Ä–µ–∑—é–º–µ: {hit.get('summary_short', '–ù—è–º–∞')[:100]}...")

        # –û–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏—Ç–µ
        changes_made = []
        
        if args.summary is not None:
            old_summary = hit.get('summary_short', '')
            hit['summary_short'] = args.summary
            changes_made.append(f"—Ä–µ–∑—é–º–µ –æ–±–Ω–æ–≤–µ–Ω–æ ({len(old_summary)} ‚Üí {len(args.summary)} —Å–∏–º–≤–æ–ª–∞)")

        if args.category is not None:
            old_category = hit.get('category', '–Ω—è–º–∞')
            hit['category'] = args.category
            changes_made.append(f"–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {old_category} ‚Üí {args.category}")

        if args.tags is not None:
            old_tags = hit.get('tags', [])
            new_tags = validate_tags(args.tags)
            hit['tags'] = new_tags
            changes_made.append(f"—Ç–∞–≥–æ–≤–µ: {old_tags} ‚Üí {new_tags}")

        if args.date is not None:
            old_date = hit.get('date', '–Ω—è–º–∞')
            hit['date'] = args.date
            changes_made.append(f"–¥–∞—Ç–∞: {old_date} ‚Üí {args.date}")

        if not changes_made:
            print("‚ö†Ô∏è  –ù—è–º–∞ –ø—Ä–æ–º–µ–Ω–∏ –∑–∞ –ø—Ä–∏–ª–∞–≥–∞–Ω–µ.")
            return

        # –ó–∞–ø–∞–∑–≤–∞–Ω–µ –Ω–∞ –æ–±–Ω–æ–≤–µ–Ω–∞—Ç–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω–∏
        with open(db_path, 'w', encoding='utf-8') as f:
            json.dump(db, f, ensure_ascii=False, indent=2)

        print(f"\n‚úÖ –î–æ–∫—É–º–µ–Ω—Ç '{args.id}' –µ –æ–±–Ω–æ–≤–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("üîÑ –ü—Ä–æ–º–µ–Ω–∏:")
        for change in changes_made:
            print(f"  ‚Ä¢ {change}")
        
        print(f"\nüí° –°—ä–≤–µ—Ç: –ò–∑–ø—ä–ª–Ω–µ—Ç–µ 'python manifest.py' –∑–∞ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ –Ω–∞ CSV —Ñ–∞–π–ª–∞")

    except Exception as e:
        print(f"‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤—è–≤–∞–Ω–µ: {e}")
        return

if __name__ == '__main__':
    main()
